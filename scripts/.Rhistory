suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(argparse))
# Load functions
source("aligned_perc_calc_functions.r")
opt <- list()
opt$filename = list.files("..","sortedSuper")
opt$filename
opt$length_threshold = 1000
opt$identity_threshold = 90.0
ength_threshold = opt$length_threshold
rm(ength_threshold)
mode <- 1 # mode 1 is wrapper mode, 0 is standalone mode
# remake of aligned_perc_calc.py
oldtime <- Sys.time() # test speed of script
coords_files <- opt$filename
for (i in coords_files){
filtered_data <- get_filtered_data(filename = i,
length_threshold = opt$length_threshold,
identity_threshold = opt$identity_threshold,
mode = mode) # filter the data
merged <- merge_data(filename = gsub(".coords",".tsv",gsub("sorted","Temp/filtered",i)),mode = mode, data = filtered_data) # remove redundant sequences and merge overlapping sequences
get_aligned_perc(filename = gsub(".coords",".NR.tsv",gsub("sorted","Temp/filtered",i)),mode = mode, data = merged) # calculate the percentage of aligned bases
}
print(Sys.time()-oldtime)
opt$filename
paste0("../",opt$filename)
opt$filename <- paste0("../",opt$filename)
mode <- 1 # mode 1 is wrapper mode, 0 is standalone mode
# remake of aligned_perc_calc.py
oldtime <- Sys.time() # test speed of script
coords_files <- opt$filename
for (i in coords_files){
filtered_data <- get_filtered_data(filename = i,
length_threshold = opt$length_threshold,
identity_threshold = opt$identity_threshold,
mode = mode) # filter the data
merged <- merge_data(filename = gsub(".coords",".tsv",gsub("sorted","Temp/filtered",i)),mode = mode, data = filtered_data) # remove redundant sequences and merge overlapping sequences
get_aligned_perc(filename = gsub(".coords",".NR.tsv",gsub("sorted","Temp/filtered",i)),mode = mode, data = merged) # calculate the percentage of aligned bases
}
print(Sys.time()-oldtime)
rm(filtered_data,merged,coords_files,i,oldtime)
mode <- 1 # mode 1 is wrapper mode, 0 is standalone mode
# remake of aligned_perc_calc.py
oldtime <- Sys.time() # test speed of script
coords_files <- opt$filename
for (i in coords_files){
filtered_data <- get_filtered_data(filename = i,
length_threshold = opt$length_threshold,
identity_threshold = opt$identity_threshold,
mode = mode) # filter the data
merged <- merge_data(filename = gsub(".coords",".tsv",gsub("sorted","Temp/filtered",i)),mode = mode, data = filtered_data) # remove redundant sequences and merge overlapping sequences
get_aligned_perc(filename = gsub(".coords",".NR.tsv",gsub("sorted","Temp/filtered",i)),mode = mode, data = merged) # calculate the percentage of aligned bases
}
print(Sys.time()-oldtime)
# Load packages
suppressPackageStartupMessages(library(tidyr))
opt$filename = list.files(".",".txt")
opt$out = "results.tsv"
# Merge the aligned_percentages of all alignments into 1 matrix and writes it as .tsv
merge2matrix <- function(data = opt$filename, outfile = opt$out){
aligned_perc_matrix <- c()
for (i in data){
aligned_perc_matrix <- rbind(aligned_perc_matrix,read.table(i, header = T, sep = "\t", stringsAsFactors = F))
}
aligned_perc_matrix <- spread(as.data.frame(aligned_perc_matrix),"query_name","aligned_perc") # spread out the data based on the chr number
rownames(aligned_perc_matrix) <- aligned_perc_matrix[,1] # set column containing names as rownames
aligned_perc_matrix <- aligned_perc_matrix[,-1] # remove column containing names
aligned_perc_matrix <- aligned_perc_matrix[,order(as.numeric(colnames(aligned_perc_matrix)))] # order the columns
write.table(aligned_perc_matrix,outfile,sep = "\t") # write as .tsv for use in future scripts
return(aligned_perc_matrix)
}
merge2matrix(data = opt$filename, outfile = opt$out)
